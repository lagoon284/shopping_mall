-- 회원 테이블 생성.
CREATE TABLE IF NOT EXISTS USERS (
    USERNO          BIGINT  PRIMARY KEY AUTO_INCREMENT,
    ID              NVARCHAR(30)    NOT NULL    UNIQUE ,
    PW              NVARCHAR(30)    NOT NULL ,
    NAME            NVARCHAR(30)     NOT NULL ,
    ADDR            NVARCHAR(255)    NOT NULL ,
    SLEEPFLAG       BOOLEAN         NOT NULL    DEFAULT FALSE ,

    REGDATE         VARCHAR(19)     NOT NULL ,
    UPDDATE         VARCHAR(19)
);

-- jwt 토큰 테이블 생성.
CREATE TABLE IF NOT EXISTS AUTHTOKEN (
    USERID          NVARCHAR(30) UNIQUE ,
    ACCESSTOKEN     varchar(1000) ,
    REFRESHTOKEN    varchar(1000),

    FOREIGN KEY (USERID) REFERENCES USERS(ID)
);

-- 상품 테이블 생성.
CREATE TABLE IF NOT EXISTS PRODUCTINFO (
    PRODSEQNO   BIGINT  PRIMARY KEY AUTO_INCREMENT,
    PRODNAME    NVARCHAR(255)   NOT NULL ,
    PRICE       NVARCHAR(255)   NOT NULL ,
    PROVIDER    NVARCHAR(255)   NOT NULL ,
    INFO        NVARCHAR(MAX) ,

    USEFLAG     BOOLEAN         NOT NULL ,
    REGDATE     VARCHAR(19)     NOT NULL ,
    UPDDATE     VARCHAR(19)
);

-- 게시판 테이블 생성.
CREATE TABLE IF NOT EXISTS BOARDINFO (
    SEQNO       BIGINT  PRIMARY KEY AUTO_INCREMENT,
    TITLE       NVARCHAR(255)   NOT NULL ,
    CONTENT     NVARCHAR(MAX)   NOT NULL ,
    WRITER      NVARCHAR(20)    NOT NULL ,
    WRITERID    NVARCHAR(20)    NOT NULL ,
    ISNOTICE    BOOLEAN         DEFAULT FALSE ,
    ISSECRET    BOOLEAN         DEFAULT FALSE ,
    ISDRAFT     BOOLEAN         DEFAULT FALSE ,
    STATUS      INT ,
    TAGS        NVARCHAR(MAX) ,
    PARENTID    BIGINT ,
    DEPTH       INT ,
    EXPIREAT    DATE ,
    EDITTYPE    NVARCHAR(50) ,
    VIEWCNT     BIGINT ,
    LIKECNT     BIGINT ,
    HATECNT     BIGINT ,
    REPORTCNT   BIGINT ,
    COMMENTCNT  BIGINT ,
    ATTACHMENTS NVARCHAR(MAX) ,
    IMAGES      NVARCHAR(MAX) ,
    REGDATE     VARCHAR(19)     NOT NULL ,
    UPDDATE     VARCHAR(19) ,

    FOREIGN KEY (WRITERID) REFERENCES USERS(ID)
);

-- 주문 테이블 생성.
CREATE TABLE IF NOT EXISTS ORDERINFO (
    ORDERNO     BIGINT          PRIMARY KEY ,
    USERID      NVARCHAR(30)    NOT NULL ,
    USERNAME    NVARCHAR(30)    NOT NULL ,
    USERADDR    NVARCHAR(255)   NOT NULL ,
    PRODSEQNO   BIGINT          NOT NULL ,

    PRODNAME    VARCHAR(255)    NOT NULL ,
    PRODPRICE   NVARCHAR(255)   NOT NULL ,
    REGDATE     VARCHAR(19)     NOT NULL ,
    UPDDATE     VARCHAR(19) ,

    FOREIGN KEY (USERID) REFERENCES USERS(ID),
    FOREIGN KEY (PRODSEQNO) REFERENCES productinfo(PRODSEQNO)
);

-- 배송지 테이블 생성.
CREATE TABLE IF NOT EXISTS DELIVERYADDR (
    DELIADDRNO  BIGINT          PRIMARY KEY AUTO_INCREMENT ,
    USERID      NVARCHAR(30)    NOT NULL ,
    ADDRALIAS   NVARCHAR(10)    NOT NULL ,
    DELIADDR    NVARCHAR(255)   NOT NULL ,
    DEFDELIADDR BOOLEAN         NOT NULL DEFAULT FALSE,
    REGDATE     VARCHAR(19)     NOT NULL ,
    UPDDATE     VARCHAR(19) ,

    FOREIGN KEY (USERID)    REFERENCES USERS(ID)
);

-- 댓/대댓글 테이블 생성.
CREATE TABLE IF NOT EXISTS COMMENTINFO (
    CMTSEQNO    BIGINT          PRIMARY KEY AUTO_INCREMENT ,
    WRITER      NVARCHAR(30)    NOT NULL ,
    WRITERID    NVARCHAR(30)    NOT NULL ,
    CONTENT     NVARCHAR(MAX)   NOT NULL ,
    BOARDSEQNO  BIGINT          NOT NULL ,
    PARENTSEQNO BIGINT          NULL ,
    STATUS      INT             NULL ,
    REGDATE     VARCHAR(19)     NOT NULL ,
    UPDDATE     VARCHAR(19) ,

    FOREIGN KEY (BOARDSEQNO) REFERENCES BOARDINFO(SEQNO) ,
    FOREIGN KEY (PARENTSEQNO) REFERENCES COMMENTINFO(CMTSEQNO),
    FOREIGN KEY (WRITERID) REFERENCES USERS(ID)
);

-- 회원 데이터 삽입.
INSERT INTO USERS (ID, PW, NAME, ADDR, REGDATE)
SELECT *
FROM (SELECT 'test1' AS ID, '1234' AS PW, 'John Doe' AS NAME, '경기도 용인시 어쩌구 저쩌구' AS ADDR, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') AS REGDATE UNION ALL
      SELECT 'test2', '1234', 'Jane Smith', '경기도 화성시 어쩌구 저쩌구', FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT 'test3', '1234', 'Alice Johnson', '경기도 성남시 어쩌구 저쩌구', FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT 'test4', '1234', 'Bob Brown', '서울 중랑구 어쩌구 저쩌구', FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT 'test5', '1234', 'Charlie Green', '경기도 구리시 어쩌구 저쩌구', FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss')) AS TEMP
WHERE NOT EXISTS (SELECT 1 FROM USERS);

-- 상품 데이터 삽입.
INSERT INTO PRODUCTINFO (PRODNAME, PRICE, PROVIDER, INFO, USEFLAG, REGDATE)
SELECT *
FROM (SELECT '티셔츠' AS PRODNAME, '25000' AS PRICE, '마프' AS PROVIDER, '평범한 티 입니다.' AS INFO, true as USEFLAG, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') AS REGDATE UNION ALL
      SELECT '티셔츠1', '25000', '마프', '평범한 티 입니다.', true, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT '티셔츠2', '25000', '마프', '평범한 티 입니다.', true, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT '티셔츠3', '25000', '마프', '평범한 티 입니다.', true, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT '티셔츠4', '25000', '마프', '평범한 티 입니다.', true, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss')) AS TEMP
WHERE NOT EXISTS (SELECT 1 FROM PRODUCTINFO);

-- 게시판 데이터 삽입.
INSERT INTO BOARDINFO (TITLE, CONTENT, WRITER, WRITERID, REGDATE)
SELECT *
FROM (SELECT '제목' AS TITLE, '내용입니다.' AS CONTENT, '글쓴이' AS WRITER, 'test1' AS WRITERID, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') AS REGDATE UNION ALL
      SELECT '제목1', '내용입니다1.', '글쓴이1', 'test2', FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT '제목2', '내용입니다2.', '글쓴이2', 'test3', FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT '제목3', '내용입니다3.', '글쓴이3', 'test4', FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss') UNION ALL
      SELECT '제목4', '내용입니다4.', '글쓴이4', 'test5', FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss')) AS TEMP
WHERE NOT EXISTS (SELECT 1 FROM BOARDINFO);



-- 댓/대댓글 더미 데이터 삽입.
-- 1. 부모 댓글(최상위 댓글) 입력
INSERT INTO COMMENTINFO (WRITER, WRITERID, CONTENT, BOARDSEQNO, PARENTSEQNO, STATUS, REGDATE)
SELECT '글쓴이1', 'test1', '댓글의 내용입니다.', 1, NULL, 0, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss')
    WHERE NOT EXISTS (SELECT 1 FROM COMMENTINFO);

-- 2. 첫 번째 대댓글 입력 (방금 입력한 부모의 PK 사용)
INSERT INTO COMMENTINFO (WRITER, WRITERID, CONTENT, BOARDSEQNO, PARENTSEQNO, STATUS, REGDATE)
SELECT '글쓴이2', 'test2', '대댓글의 내용이고 test1 이 등록한 댓글의 대댓글입니다. 맞습미꽈?', 1, 1, 0, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss')
WHERE NOT EXISTS (SELECT 1 FROM COMMENTINFO WHERE WRITERID = 'test2');

-- 3. 두 번째 대댓글 입력 (방금 입력한 대댓글의 PK 사용)
INSERT INTO COMMENTINFO (WRITER, WRITERID, CONTENT, BOARDSEQNO, PARENTSEQNO, STATUS, REGDATE)
SELECT '글쓴이3', 'test3', '대댓글의 내용이고 test2 이 등록한 대댓글의 대댓글입니다. 맞습미꽈?', 1, 2, 0, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss')
WHERE NOT EXISTS (SELECT 1 FROM COMMENTINFO WHERE WRITERID = 'test3');

-- 4. 또 다른 최상위 댓글 입력
INSERT INTO COMMENTINFO (WRITER, WRITERID, CONTENT, BOARDSEQNO, PARENTSEQNO, STATUS, REGDATE)
SELECT '글쓴이4', 'test4', '댓글의 내용입니다. 맞습미꽈?', 1, NULL, 0, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss')
    WHERE NOT EXISTS (SELECT 1 FROM COMMENTINFO WHERE WRITERID = 'test4');

-- 5. 첫 번째 부모 댓글(글쓴이1)의 또 다른 대댓글 입력
-- 이 부분은 1번 댓글의 PK(CMTSEQNO=1)를 직접 사용해야 하므로, 만약 PK가 1이 아니면
-- 먼저 SELECT로 CMTSEQNO를 조회한 뒤 그 값을 넣어야 합니다.
INSERT INTO COMMENTINFO (WRITER, WRITERID, CONTENT, BOARDSEQNO, PARENTSEQNO, STATUS, REGDATE)
SELECT '글쓴이5', 'test5', '대댓글의 내용이고 test1 이 등록한 댓글의 대댓글입니다. 맞습미꽈? 이게 두번째여야합니다.', 1, 1, 0, FORMATDATETIME(CURRENT_TIMESTAMP, 'yyyy-MM-dd HH:mm:ss')
    WHERE NOT EXISTS (SELECT 1 FROM COMMENTINFO WHERE WRITERID = 'test5');